{"id": "53e99784b7602d9701f3f6b5", "title": "Freefinement", "authors": [{"name": "Stephan van Staden", "org": "ETH Zurich, Zurich, Switzerland", "id": "53f474cddabfaee4dc887567"}, {"name": "Cristiano Calcagno", "org": "Imperial College London, London, United Kingdom", "id": "560175f145cedb3395e5a417"}, {"name": "Bertrand Meyer", "org": "ETH Zurich, Zurich, Switzerland", "id": "53f430fbdabfaeb22f435e19"}], "venue": {"raw": "POPL", "id": "547ffa8cdabfaebedf84f1cf"}, "year": 2012, "keywords": ["original system", "simple type system", "extended system", "verification system", "refinement calculus", "Hoare logic", "extended language", "formal system", "type system", "sound refinement calculus"], "n_citation": 1, "page_start": "7", "page_end": "18", "lang": "en", "volume": "", "issue": "", "doi": "10.1145/2103656.2103661", "pdf": "//static.aminer.org/pdf/20170130/pdfs/popl/vgtwu8dnbbaimql5sy2evic9tan1xkef.pdf", "url": ["http://dx.doi.org/10.1145/2103656.2103661", "http://doi.acm.org/10.1145/2103656.2103661", "https://static.aminer.org/pdf/20170130/pdfs/index.txt"], "abstract": "Freefinement is an algorithm that constructs a sound refinement calculus from a verification system under certain conditions. In this paper, a verification system is any formal system for establishing whether an inductively defined term, typically a program, satisfies a specification. Examples of verification systems include Hoare logics and type systems. Freefinement first extends the term language to include specification terms, and builds a verification system for the extended language that is a sound and conservative extension of the original system. The extended system is then transformed into a sound refinement calculus. The resulting refinement calculus can interoperate closely with the verification system - it is even possible to reuse and translate proofs between them. Freefinement gives a semantics to refinement at an abstract level: it associates each term of the extended language with a set of terms from the original language, and refinement simply reduces this set. The paper applies freefinement to a simple type system for the lambda calculus and also to a Hoare logic."}
{"id": "53e99784b7602d9701f3f72f", "title": "Ferroresonance", "authors": [{"name": "Donald M. Scoggin", "org": "IBM Corporation, Research Triangle Park, NC", "id": "53f42b9ddabfaec22b9fbcb7"}, {"name": "James E. Hall, Jr.", "org": "IBM Corporation, Research Triangle Park, NC", "id": "53f46d57dabfaedd74e857f2"}], "venue": {"raw": "IBM Journal of Research and Development", "id": "54509bf0dabfaed2f6e76880"}, "year": 1987, "page_start": "665", "page_end": "678", "lang": "en", "volume": "31", "issue": "6", "doi": "10.1147/rd.316.0665"}
{"id": "53e99784b7602d9701f3f730", "title": "FaxFacts", "authors": [{"name": "L. Brett Glass", "id": "53f42eb6dabfaec09f125ba2"}], "venue": {"raw": "BYTE", "id": "5451a57ae0cf0b02b5f2ddcb"}, "year": 1991, "n_citation": 1, "page_start": "301", "page_end": "ff.", "lang": "en", "volume": "16", "issue": "2"}
{"id": "53e99784b7602d9701f3f731", "title": "FlashPrint", "authors": [{"name": "Ed Tiley", "id": "53f31bbedabfae9a844389ee"}], "venue": {"raw": "Windows User", "id": "5451a57be0cf0b02b5f2e616"}, "year": 1993, "n_citation": 0, "page_start": "108", "page_end": "108", "lang": "en", "volume": "2", "issue": "5"}
{"id": "53a72a9220f7420be8c0619c", "title": "Stable Algorithms for Link Analysis.", "authors": [{"name": "Alice X. Zheng"}, {"name": "Andrew Y. Ng"}, {"name": "Michael I. Jordan"}], "venue": {"raw": "SIGIR"}, "year": 2001, "n_citation": 0, "page_start": "258", "page_end": "266", "lang": "en", "volume": "", "issue": "", "url": ["http://doi.acm.org/10.1145/383952.384003"]}